<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo博客编写常用命令</title>
      <link href="/2024/07/21/hexo-chang-yong-ming-ling/"/>
      <url>/2024/07/21/hexo-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read." />    <label for="pass">Please enter the password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习之Python编程规范</title>
      <link href="/2019/10/25/python-xue-xi-zhi-python-bian-cheng-gui-fan/"/>
      <url>/2019/10/25/python-xue-xi-zhi-python-bian-cheng-gui-fan/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>为什么Python编程需要规范？</p><p>规范的要求有那几个方面？</p><p>不规范的后果有哪些？</p><p>书写规范的标准</p><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><p>1.标识符命名规则</p><p>以字母、下划线、数字组成，且不能以数字开头</p><p>不能是关键字与保留字</p><pre><code>注：python3标识符可以存在汉字，不推荐标识符包括 模块名(.py文件名)、变量名、类名、函数名、包名</code></pre><p>不仅需要符合标识符命名规则、</p><p><img src="/2019/10/25/python-xue-xi-zhi-python-bian-cheng-gui-fan/Python%E5%AD%A6%E4%B9%A0%E4%B9%8BPython%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83%5CPython%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83.webp.jpg" alt="Python命名规范.webp"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>代码规范文档<br>原文档<a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0008/</a><br>谷歌中文文档<a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/" target="_blank" rel="noopener">http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/</a></p><p>博客：<a href="https://www.zrahh.com/category/biji/7/" target="_blank" rel="noopener">https://www.zrahh.com/category/biji/7/</a></p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> Python命名规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习之模块与包的导入</title>
      <link href="/2019/10/25/python-xue-xi-zhi-mo-kuai-yu-bao-de-dao-ru/"/>
      <url>/2019/10/25/python-xue-xi-zhi-mo-kuai-yu-bao-de-dao-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>为什么存在导入语句？</p><p>python能够使用import语句导入哪些东西？</p><p>导入时出现<code>ModuleNotFoundError: No module named &#39;xxx&#39;</code>错误的原因，导入的模块的路径查找顺序？</p><p>导入语句的几种形式及注意点</p><p>sys模块与导入路径关系</p><p><code>__init__.py文件的作用</code></p><p><code>if __name__==&#39;__main__&#39;:</code>的使用</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>包、模块的概念</p><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>导入语句格式及注意点</p><p>推荐的导入方式</p><h1 id="1-导入语句的必要性"><a href="#1-导入语句的必要性" class="headerlink" title="1. 导入语句的必要性"></a>1. 导入语句的必要性</h1><p>模块复用——-减少代码冗余、提高开发效率</p><h1 id="2-导入的对象"><a href="#2-导入的对象" class="headerlink" title="2. 导入的对象"></a>2. 导入的对象</h1><ul><li>模块文件（.py文件）<ul><li>导入整个文件</li><li>导入变量</li><li>导入函数</li><li>导入类</li></ul></li><li>C或C++扩展（已编译为共享库或DLL文件）</li><li>包（包含多个模块，一定包含<code>__init__.py</code>文件）</li><li>内建模块（使用C编写并已链接到Python解释器中）</li></ul><h1 id="3-模块的搜索路径"><a href="#3-模块的搜索路径" class="headerlink" title="3. 模块的搜索路径"></a>3. 模块的搜索路径</h1><p>出现<code>ModuleNotFoundError: No module named &#39;xxx&#39;</code>问题一定是因为在<code>sys.path</code>返回的所有路径中搜索不到模块的名字</p><p><code>sys.path</code>指定了模块的搜索路径的字符串列表。sys模块包含了与python解释器和它的环境有关的函数, 里面有个 sys.path属性。它是一个list.默然情况下python导入文件或者模块的话，他会先在<code>sys.path</code>里找模块的路径。如果没有的话,程序就会报错。</p><p>通过<code>sys.path</code>指定了模块的搜索路径的字符串列表。</p><p><code>sys.path.append()</code>方法添加模块的搜索路径，<code>sys.path</code>作用域只是当前进程，进程结束后就失效了。</p><p>例：<code>sys.path.append(&#39;&#39;)</code>将当前路径加入到模块的搜索路径</p><h3 id="3-1-模块的搜索路径的组成"><a href="#3-1-模块的搜索路径的组成" class="headerlink" title="3.1 模块的搜索路径的组成"></a>3.1 模块的搜索路径的组成</h3><p>Python搜索模块的路径是由四部分构成的：程序的主目录、PATHONPATH目录、标准链接库目录和.pth文件的目录，这四部分的路径都存储在sys.path 列表中。</p><p><strong>1，程序的主目录</strong></p><p>主目录是指包含程序的顶层脚本的目录，Python首先会到主目录中搜索模块。</p><p>因为主目录总是第一个被搜索，如果模块完全处于主目录中，所有的导入都会自动完成，而不需要单独配置路径。</p><p><strong>2，PATHONPATH目录</strong></p><p>PATHONPATH目录是指PATHONPATH环境变量中配置的目录，是第二个被搜索的目录，Python会从左到右搜索PATHONPATH环境变量中设置的所有目录。</p><p><strong>3，标准链接库目录</strong></p><p>标准链接库目录是Python按照标准模块的目录，是在安装Python时自动创建的目录，通常不需要添加到PYTHONPATH目录中。</p><p><strong>4，路径文件（.pth文件）</strong></p><p>在模块搜索目录中，创建路径文件，后缀名为.pth，该文件每一行都是一个有效的目录。Python会读取路径文件中的内容，每行都作为一个有效的目录，加载到模块搜索路径列表中。简而言之，当路径文件存放到搜索路径中时，其作用和PYT)HONPATH环境变量的作用相同。</p><p>如果运行在Windows和Python3.0中，如果Python安装目录的顶层是C:\Python30，那么可以把自定义的路径文件 mypath.pth 放到该目录中。</p><p>也可以放到标准库所在位置的sitepackages子目录中（C:\Python30\Lib\sitepackages），来扩展模块的搜搜路径。</p><h3 id="3-2-设置模块的搜索路径"><a href="#3-2-设置模块的搜索路径" class="headerlink" title="3.2 设置模块的搜索路径"></a>3.2 设置模块的搜索路径</h3><p>上述四种模块搜索路径，能够配置的选项只有PYTHONPATH环境变量和路径文件。</p><ul><li>例如，在Windows平台上，创建PYTHONPATH环境变量，设置变量的值，两个目录使用分号隔开：</li></ul><pre><code>C:\pycode\utilities;D:\pycode\package1</code></pre><ul><li>也可以创建一个名为 C:\Python30\pydirs.pth的文本文件，其内容如下所示：</li></ul><pre><code>C:\pycode\utilitiesD:\pycode\package1</code></pre><ul><li><code>sys.path.append(absolute_or_relative_path_string)</code>将当前路径加入到模块的搜索路径，一般在代码编写的最前面———————————————————-<strong>推荐</strong></li></ul><h2 id="init-py的主要作用"><a href="#init-py的主要作用" class="headerlink" title="__init__.py的主要作用"></a><code>__init__.py</code>的主要作用</h2><ol><li><p>Python中package的标识，不能删除</p></li><li><p>定义<code>__all__</code>用来模糊导入</p></li><li><p>编写Python代码(不建议在<code>__init__</code>中写python模块，可以在包中在创建另外的模块来写，尽量保证<code>__init__.py</code>简单）</p></li></ol><p><code>__init__.py</code> 文件的作用是将文件夹变为一个Python模块,Python 中的每个模块的包中，都有<code>__init__.py</code> 文件。</p><p>通常<code>__init__.py</code> 文件为空，但是我们还可以为它增加其他的功能。我们在导入一个包时，实际上是导入了它的<code>__init__.py</code>文件。这样我们可以在<code>__init__.py</code>文件中批量导入我们所需要的模块，而不再需要一个一个的导入。</p><h1 id="4-导入语句"><a href="#4-导入语句" class="headerlink" title="4. 导入语句"></a>4. 导入语句</h1><h2 id="4-1-导入模块"><a href="#4-1-导入模块" class="headerlink" title="4.1 导入模块"></a>4.1 导入模块</h2><h3 id="导入语法"><a href="#导入语法" class="headerlink" title="导入语法"></a>导入语法</h3><ol><li><p>导入整个模块(.py文件)</p><p>格式1：<code>import module_name</code>            </p><p>格式2：<code>import package_name.module_name</code>            当模块在某个包内</p></li><li><p>导入某个模块的类（变量与函数类似）</p><p>格式1：<code>import module_name.class_name</code></p><p>格式2：<code>from package_name.module_name import class_name</code>        </p><p>格式3：<code>import package_name.module_name.class_name</code>        当类所在模块模块在某个包内</p><p>格式4：<code>from package_name.module_nameimport class_name</code>        当类所在模块模块在某个包内</p></li></ol><h3 id="if-name-39-main-39-的使用"><a href="#if-name-39-main-39-的使用" class="headerlink" title="if __name__==&#39;__main__&#39;:的使用"></a><code>if __name__==&#39;__main__&#39;:</code>的使用</h3><ul><li>if <strong>name</strong> == ‘<strong>main</strong>‘ 我们简单的理解就是： 如果模块是被直接运行的，则代码块被运行，如果模块是被导入的，则代码块不被运行。</li><li>作用<ul><li>作为模块测试—–测试当前.py文件的功能</li></ul></li><li><code>if __name__==__main__:</code>如果模块是被导入的，则代码块不被运行的原因<ul><li>在当前模块直接执行<code>print(__name__)</code>的结果永远是：<code>__main__</code></li><li>在当前模块被别的模块import导入执行时<code>__name__</code>结果是：[包名.]模块名</li><li>if判断<code>__name__</code>不等于<code>__main__</code>，故不执行其下的代码，导入时执行了判断，只是不符合条件</li></ul></li></ul><h3 id="查看导入的模块的路径"><a href="#查看导入的模块的路径" class="headerlink" title="查看导入的模块的路径"></a>查看导入的模块的路径</h3><p>语句：<code>module_name.__file__</code></p><p>如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randomrandom<span class="token punctuation">.</span>__file__</code></pre><p>需要说明的是，并不是所有模块都是使用 Python 语言编写的，有些与底层交互的模块可能是用 C 语言编写的，而且是 C 程序编译之后的效果，因此这种模块可能没有 file 属性，如sys模块。</p><h2 id="4-2-导入包"><a href="#4-2-导入包" class="headerlink" title="4.2 导入包"></a>4.2 导入包</h2><h3 id="格式1：import-package-name-导入包下的-init-py文件"><a href="#格式1：import-package-name-导入包下的-init-py文件" class="headerlink" title="格式1：import package_name             导入包下的__init__.py文件"></a>格式1：import package_name             导入包下的<code>__init__.py</code>文件</h3><p>（1）如果包下的<code>__init__.py</code>文件没有写任何语句，是一个空文件，这种格式无法调用任何包内的模块</p><p>例子：</p><p>文件</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># my_package_1包下的__init__.py文件</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># my_package_1包下的test01.py文件</span><span class="token keyword">def</span> <span class="token function">my_test_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这里是my_package_1包下的test01.py文件'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># my_import_package_1.py文件</span><span class="token keyword">import</span> my_package_1my_package_1<span class="token punctuation">.</span>test01<span class="token punctuation">.</span>my_test_1<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python">AttributeError<span class="token punctuation">:</span> module <span class="token string">'my_package_1'</span> has no attribute <span class="token string">'my_test_1'</span></code></pre><p>原因：</p><p><code>__init__.py</code>是一个空文件，使用<code>import package_name</code>该种导入方式无法使用包中的模块，保证<code>__init__.py</code>导入模块写了import 导入语句（建议和<code>__all__</code>连用，但是单独只有<code>__all__</code>无法找到模块）</p><p>（2）如果包下的<code>__init__.py</code>文件写了导入语句</p><p>例子：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># my_package_2包下的__init__.py文件</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> test02<span class="token comment" spellcheck="true">#__all__=['test02']</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># my_package_2包下的test02.py文件</span><span class="token keyword">def</span> <span class="token function">my_test_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这里是my_package_2包下的test02.py文件'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># my_import_package_2.py文件</span><span class="token keyword">import</span> my_package_2my_package_1<span class="token punctuation">.</span>test02<span class="token punctuation">.</span>my_test_2<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python">这里是my_package_2包下的test01<span class="token punctuation">.</span>py文件</code></pre><p>原因：</p><p><code>__init__.py</code>是一个空文件，使用<code>import package_name</code>该种导入方式无法使用包中的模块，保证<code>__init__.py</code>导入模块写了导入语句或给<code>__all__</code>赋值</p><p>建议：<code>__init__.py</code>导入模块写import 导入语句（建议和<code>__all__</code>连用，但是单独只写<code>__all__</code>不写导入语句无法找到模块）</p><h3 id="格式2：from-package-name-import-module-name——-推荐"><a href="#格式2：from-package-name-import-module-name——-推荐" class="headerlink" title="格式2：from package_name import module_name——-推荐"></a>格式2：from package_name import module_name——-推荐</h3><p>（1）对包下的<code>__init__.py</code>文件没有要求，这种格式直接调用任何包内的某个模块</p><p>例子：</p><p>文件</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># my_package_3包下的__init__.py文件</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># my_package_3包下的test03.py文件</span><span class="token keyword">def</span> <span class="token function">my_test_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这里是my_package_3包下的test03.py文件'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># my_import_package_3.py文件</span><span class="token keyword">from</span> my_package_3 <span class="token keyword">import</span> test03    <span class="token comment" spellcheck="true">#**********************************************</span>test03<span class="token punctuation">.</span>my_test_3<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这里是my_package_3包下的test03.py文件'</span><span class="token punctuation">)</span></code></pre><h3 id="格式3：from-package-name-import"><a href="#格式3：from-package-name-import" class="headerlink" title="格式3：from package_name import *"></a>格式3：from package_name import *</h3><p><code>from package_name import *</code>调用时不需要写包名，引入过多有命名冲突问题</p><p><code>from package_name import *</code>导入的是</p><ul><li><p>所有在<code>__init__.py</code>文件中<code>__all__</code>列表变量的内容</p></li><li><p><code>__init__.py</code>文件中import导入的模块</p></li><li><p><code>__all__</code>列表与import导入同时使用，以<code>__all__</code>列表为准</p></li><li><p>同格式1：<code>import package_name</code>，需要保证<code>__init__.py</code>有被调用的导入模块</p></li></ul><h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h1><p>什么是内建模块？module ‘sys’ &lt; built-in &gt; is a built-in module，与普通的模块区别？为什么嵌入式版本python模块搜寻路径没有当前路径？</p><p><code>__init__.py</code>可以写哪些内容？作用是什么？有什么书写建议或规范？</p><p>相对导入与绝对导入问题</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>1.<a href="https://blog.csdn.net/v_xchen_v/article/details/80393967" target="_blank" rel="noopener"><strong>【Python】 sys.path(环境变量)与<strong>init</strong>.py</strong></a>（<a href="https://blog.csdn.net/v_xchen_v/article/details/80393967）" target="_blank" rel="noopener">https://blog.csdn.net/v_xchen_v/article/details/80393967）</a></p><p>2.<a href="https://www.cnblogs.com/ljhdo/p/10674242.html" target="_blank" rel="noopener">Python 学习 第13篇：模块搜索路径和包导入</a>（<a href="https://www.cnblogs.com/ljhdo/p/10674242.html）" target="_blank" rel="noopener">https://www.cnblogs.com/ljhdo/p/10674242.html）</a></p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> sys模块 </category>
          
          <category> __init__.py </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境安装</title>
      <link href="/2019/07/22/python-huan-jing-an-zhuang/"/>
      <url>/2019/07/22/python-huan-jing-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://www.python.org/downloads" target="_blank" rel="noopener">Python官网安装地址</a> : <a href="https://www.python.org/downloads" target="_blank" rel="noopener">https://www.python.org/downloads</a></p><p>以安装<a href="https://www.python.org/downloads/release/python-374/" target="_blank" rel="noopener">Python 3.7.4</a>为例</p><h2 id="安装包选项"><a href="#安装包选项" class="headerlink" title="安装包选项"></a>安装包选项</h2><h3 id="安装包选项如下："><a href="#安装包选项如下：" class="headerlink" title="安装包选项如下："></a>安装包选项如下：</h3><table><thead><tr><th>Version</th><th>Operating System</th><th>Description</th><th>File Size</th><th>GPG</th></tr></thead><tbody><tr><td><a href="https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz" target="_blank" rel="noopener">Gzipped source tarball</a></td><td>Source release</td><td></td><td>23017663</td><td><a href="https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz" target="_blank" rel="noopener">XZ compressed source tarball</a></td><td>Source release</td><td></td><td>17131432</td><td><a href="https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-macosx10.6.pkg" target="_blank" rel="noopener">macOS 64-bit/32-bit installer</a></td><td>Mac OS X</td><td>for Mac OS X 10.6 and later</td><td>34898416</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-macosx10.6.pkg.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-macosx10.9.pkg" target="_blank" rel="noopener">macOS 64-bit installer</a></td><td>Mac OS X</td><td>for OS X 10.9 and later</td><td>28082845</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-macosx10.9.pkg.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python374.chm" target="_blank" rel="noopener">Windows help file</a></td><td>Windows</td><td></td><td>8131761</td><td><a href="https://www.python.org/ftp/python/3.7.4/python374.chm.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-embed-amd64.zip" target="_blank" rel="noopener">Windows x86-64 embeddable zip file</a></td><td>Windows</td><td>for AMD64/EM64T/x64</td><td>7504391</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-embed-amd64.zip.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-amd64.exe" target="_blank" rel="noopener">Windows x86-64 executable installer</a></td><td>Windows</td><td>for AMD64/EM64T/x64</td><td>26680368</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-amd64.exe.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-amd64-webinstall.exe" target="_blank" rel="noopener">Windows x86-64 web-based installer</a></td><td>Windows</td><td>for AMD64/EM64T/x64</td><td>1362904</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-amd64-webinstall.exe.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-embed-win32.zip" target="_blank" rel="noopener">Windows x86 embeddable zip file</a></td><td>Windows</td><td></td><td>6741626</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-embed-win32.zip.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4.exe" target="_blank" rel="noopener">Windows x86 executable installer</a></td><td>Windows</td><td></td><td>25663848</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4.exe.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-webinstall.exe" target="_blank" rel="noopener">Windows x86 web-based installer</a></td><td>Windows</td><td></td><td>1324608</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-webinstall.exe.asc" target="_blank" rel="noopener">SIG</a></td></tr></tbody></table><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>web-based installer 是需要通过联网完成安装的</p><p>executable installer 是可执行文件(*.exe)方式安装</p><p>embeddable zip file 嵌入式版本，可以集成到其它应用中。</p><p>embeddable zip file 嵌入式版本<a href="https://docs.python.org/3.5/using/windows.html#embedded-distribution" target="_blank" rel="noopener">官网描述</a>如下：</p><blockquote><p>The embedded distribution is a ZIP file containing a minimal Python environment. <strong>It is intended for acting as part of another application, rather than being directly accessed by end-users.</strong></p><p>When extracted, the embedded distribution is (almost) fully isolated from the user’s system, including environment variables, system registry settings, and installed packages. The standard library is included as pre-compiled and optimized .pyc files in a ZIP, and python3.dll, python35.dll, python.exe and pythonw.exe are all provided. <strong>Tcl/tk (including all dependants, such as Idle), pip and the Python documentation are not included.</strong></p><p><strong>Note：</strong>The embedded distribution <strong>does not include the <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48145" target="_blank" rel="noopener">Microsoft C Runtime</a></strong> and it is the responsibility of the application installer to provide this. The runtime may have already been installed on a user’s system previously or automatically via Windows Update, and can be detected by finding ucrtbase.dll in the system directory.</p><p>Third-party packages should be installed by the application installer alongside the embedded distribution. Using pip to manage dependencies as for a regular Python installation is not supported with this distribution, though with some care it may be possible to include and use pip for automatic updates. In general, third-party packages should be treated as part of the application (“vendoring”) so that the developer can ensure compatibility with newer versions before providing updates to users.</p><p>The two recommended use cases for this distribution are described below.</p></blockquote><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>选择安装<a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-amd64.exe" target="_blank" rel="noopener">Windows x86-64 executable installer</a>版本</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1.双击python-3.7.4-amd64.exe</p><p>首页界面</p><p><img src="/2019/07/22/python-huan-jing-an-zhuang/%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A21.png" alt="安装首页"></p><p>点击自定义安装</p><p><img src="/2019/07/22/python-huan-jing-an-zhuang/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A22.png" alt></p><p>说明：</p><p><a href="https://www.cnblogs.com/Neeo/p/8393805.html" target="_blank" rel="noopener">Python launcher根据文件头自动帮我们调用了指定版本的解释器来执行该文件。</a></p><p>勾选相应需求，点击下一步</p><p><img src="/2019/07/22/python-huan-jing-an-zhuang/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A23.png" alt></p><p>点击安装</p><blockquote><p>注意：如果是第一次安装，安装完成后会有个提示 Removing the MAX_PATH Limitation。我们选择Enable即可。主要原因是 Windows historically has limited path lengths to 260 characters. This meant that paths longer than this would not resolve and errors would result.也可以手动修改注册表HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem@LongPathsEnabled to 1.</p></blockquote><h3 id="检测安装"><a href="#检测安装" class="headerlink" title="检测安装"></a>检测安装</h3><p><code>Win+r</code>  ==&gt; <code>cmd</code> 调出命令行窗口</p><p>输入<code>python --version</code> </p><p>输入<code>pip --version</code></p><p><img src="/2019/07/22/python-huan-jing-an-zhuang/%E6%A3%80%E6%B5%8B%E5%AE%89%E8%A3%85.png" alt></p><h2 id="安装目录介绍"><a href="#安装目录介绍" class="headerlink" title="安装目录介绍"></a>安装目录介绍</h2><p><img src="/2019/07/22/python-huan-jing-an-zhuang/%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.png" alt></p><p>下面简单介绍一下目录、文件的具体用途：</p><pre><code>DLLs： Python 自己使用的动态库Doc： 自带的 Python 使用说明文档include： 包含共享目录Lib： 库文件，放自定义模块和包libs： 编译生成的Python 自己使用的静态库Scripts： 各种包/模块对应的可执行程序。安装时如果选择了pip。那么pip的可执行程序就在此！tcl： 桌面编程包</code></pre><hr><p>参考文献<br>原文：<a href="https://blog.csdn.net/ZCShouCSDN/article/details/84990674" target="_blank" rel="noopener">https://blog.csdn.net/ZCShouCSDN/article/details/84990674</a> </p><h2 id="嵌入式python安装"><a href="#嵌入式python安装" class="headerlink" title="嵌入式python安装"></a>嵌入式python安装</h2><p>1.选择安装<a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-embed-amd64.zip" target="_blank" rel="noopener">Windows x86-64 embeddable zip file</a>版本</p><p>2.安装pip</p><p>下载<a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">get-pip.py</a>到解压后的目录中:</p><p><img src="http://wwj-fig-bed.just4fun.site/pip_6580f932.png" alt="img"></p><p>3.之后运行:<code>.\python get-pip.py</code></p><p>修改<code>python37._pth</code>:</p><pre><code>python37.zip.# Uncomment to run site.main() automaticallyimport site   # 去掉注释</code></pre><p>4.安装第三方库</p><p>命令行切换到当前pythonan安装目录</p><p>执行命令：</p><pre><code>.\python -m pip install 库名</code></pre><p>5.python程序执行</p><pre><code>.\python C:\Users\DELL\Downloads\Compressed\python-3.7.4-embed-amd64\coding\my.py</code></pre><h2 id="Python常用命令行"><a href="#Python常用命令行" class="headerlink" title="Python常用命令行"></a>Python常用命令行</h2><p>1.运行python 程序</p><pre><code>.\python python文件名带后缀名</code></pre><p>例子：<code>.\python my.py</code></p><p>2.安装第三方库或者包</p><pre><code>.\python -m pip install  库名</code></pre><p>例子：<code>.\python -m pip install qrcode</code></p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>安装目录的各个数据分别是哪里来的？</p><p>在<code>Lib/site-packages</code>设置环境变量的作用</p><p>pip安装的模块安装在哪个目录，如何自定义安装目录？</p><p>Scripts目录里的可执行文件是如何产生的？</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 环境安装 </tag>
            
            <tag> 绿色开发软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/17/hello-world/"/>
      <url>/2019/07/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h2 id="Quick-Start-1"><a href="#Quick-Start-1" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 第一个页面 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
